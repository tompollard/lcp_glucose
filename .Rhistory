.packages <- c("ggplot2", "plyr", "arules", "arulesViz", "visNetwork", "igraph")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Load packages into session
invisible(lapply(.packages, library, character.only=TRUE))
# load the data
setwd("C:/Users/ww957/Downloads/note_ctakes_bow/")
trans = read.transactions("bow.csv", format = "basket", sep = ",", rm.duplicates = T)
rules = apriori(trans, parameter = list(support = 0.001, confidence = 0.7, minlen = 3))
quality(rules) = cbind(quality(rules), interestMeasure(rules, measure=c("chiSquare", "conviction", "cosine", "coverage", "doc", "gini", "hyperLift", "hyperConfidence", "fishersExactTest", "improvement", "leverage", "lift", "oddsRatio", "phi", "RLD"), rules))
# evaluation
summary(rules)
inspect(sort(rules, by = "lift"), n = 10)
summary(rules)
summaryDf = data.frame(summary(rules))
summary(rules)
rules = apriori(trans, parameter = list(support = 0.001, confidence = 0.7, lift = 1, minlen = 3))
rules = apriori(trans, parameter = list(support = 0.001, confidence = 0.8, minlen = 2, maxlen = 5))
quality(rules) = cbind(quality(rules), interestMeasure(rules, measure=c("chiSquare", "conviction", "cosine", "coverage", "doc", "gini", "hyperLift", "hyperConfidence", "fishersExactTest", "improvement", "leverage", "lift", "oddsRatio", "phi", "RLD"), rules))
summary(rules)
rules = apriori(trans, parameter = list(support = 0.01, confidence = 0.8, minlen = 2, maxlen = 5))
summary(rules)
rules = apriori(trans, parameter = list(support = 0.001, confidence = 0.5, minlen = 2, maxlen = 5))
summary(rules)
rules = apriori(trans, parameter = list(support = 0.01, confidence = 0.5, minlen = 2, maxlen = 5))
summary(rules)
# apriori algorithm
rules = apriori(trans, parameter = list(support = 0.01, confidence = 0.8, minlen = 2, maxlen = 5))
quality(rules) = cbind(quality(rules), interestMeasure(rules, measure=c("chiSquare", "conviction", "cosine", "coverage", "doc", "gini", "hyperLift", "hyperConfidence", "fishersExactTest", "improvement", "leverage", "lift", "oddsRatio", "phi", "RLD"), rules))
summary(rules)
inspect(sort(rules, by = "lift"), n = 10)
itemFrequencyPlot(trans,topN=20,type="absolute")
itemFrequencyPlot(rules,topN=20,type="absolute")
rules = apriori(trans, parameter = list(support = 0.01, confidence = 0.8, minlen = 2, maxlen = 5))
inspect(sort(rules, by = "lift"), n = 10)
summary(rules)
plot(rules)
plot(rules, measure=c("support", "lift"), shading="confidence")
plot(rules)
plot(rules, measure=c("support", "lift"), shading="confidence")
plot(rules, shading="order", control=list(main = "Two-key plot"))
plot(rules, measure=c("support", "lift"), shading="order", control=list(main = "Two-key plot"))
plot(rules, method="grouped", control=list(k=20))
plot(rules, method="grouped", control=list(k=10))
plot(rules, method="grouped", control=list(k=5))
rules = apriori(trans, parameter = list(support = 0.001, confidence = 0.8, minlen = 2, maxlen = 5))
inspect(sort(rules, by = "lift"), n = 10)
inspect(sort(rules, by = "lift"))[1:10]
inspect(sort(rules, by = "lift")[1:10])
inspect(sort(rules, by = "lift")[1:20])
summary(rules)
# scatter plot
plot(rules)
plot(rules, measure=c("support", "lift"), shading="order", control=list(main = "Two-key plot"))
inspect(sort(rules, by = "lift")[1:50])
plot(rules)
plot(rules, measure=c("support", "lift"), shading="order", control=list(main = "Two-key plot"))
plot(rules, method="grouped", control=list(k=10))
plot(rules, method="grouped", control=list(k=20))
plot(rules, method="grouped", control=list(k=10))
subrules = head(sort(rules, by="lift"), 10)
plot(subrules, method="graph")
plot(subrules, method="graph", control=list(type="itemsets"))
plot(subrules, method="graph")
plot(subrules, method="graph", control=list(type="itemsets"))
subrules = head(sort(rules, by="lift"), 50)
plot(subrules, method="graph", control=list(type="itemsets"))
subrules = head(sort(rules, by="lift"), 30)
plot(subrules, method="graph", control=list(type="itemsets"))
ig = plot(subrules, method="graph", control=list(type="items") )
tf = tempfile( )
saveAsGraph( subrules, file = tf, format = "dot" )
ig_df = get.data.frame( ig, what = "both" )
visNetwork(
nodes = data.frame(
id = ig_df$vertices$name
,value = ig_df$vertices$support # could change to lift or confidence
,title = ifelse(ig_df$vertices$label == "",ig_df$vertices$name, ig_df$vertices$label)
,ig_df$vertices
)
, edges = ig_df$edges
) %>%
visEdges( style = "arrow" ) %>%
visOptions( highlightNearest = T )
```{r}
# List of packages for session
.packages <- c("ggplot2", "plyr", "arules", "arulesViz", "visNetwork", "igraph")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Load packages into session
invisible(lapply(.packages, library, character.only=TRUE))
ig_df = get.data.frame( ig, what = "both" )
visNetwork(
nodes = data.frame(
id = ig_df$vertices$name
,value = ig_df$vertices$support # could change to lift or confidence
,title = ifelse(ig_df$vertices$label == "",ig_df$vertices$name, ig_df$vertices$label)
,ig_df$vertices
)
, edges = ig_df$edges
) %>%
visEdges( style = "arrow" ) %>%
visOptions( highlightNearest = T )
ig <- plot( subrules, method="graph", control=list(type="items") )
tf <- tempfile( )
saveAsGraph( subrules, file = tf, format = "dot" )
ig_df <- get.data.frame( ig, what = "both" )
visNetwork(
id = ig_df$vertices$name
nodes = data.frame(
,title = ifelse(ig_df$vertices$label == "",ig_df$vertices$name, ig_df$vertices$label)
,value = ig_df$vertices$support # could change to lift or confidence
,ig_df$vertices
)
ig <- plot( subrules, method="graph", control=list(type="items") )
# saveAsGraph seems to render bad DOT for this case
tf <- tempfile( )
saveAsGraph( subrules, file = tf, format = "dot" )
# clean up temp file if desired
#unlink(tf)
# let's bypass saveAsGraph and just use our igraph
ig_df <- get.data.frame( ig, what = "both" )
visNetwork(
nodes = data.frame(
id = ig_df$vertices$name
,value = ig_df$vertices$support # could change to lift or confidence
,title = ifelse(ig_df$vertices$label == "",ig_df$vertices$name, ig_df$vertices$label)
,ig_df$vertices
)
, edges = ig_df$edges
) %>%
visEdges( style = "arrow" ) %>%
visOptions( highlightNearest = T )
# Copyright Â© 2015 by Wei-Hung Weng
# All rights reserved. This document or any portion thereof
# may not be reproduced or used in any manner whatsoever
# without the express written permission of the author.
#
# Title : glucose classifier, using MIMIC3, relative hypoglycemia
# Author : Wei-Hung Weng
# Created : 11/19/2015
# Comment : currently 0115
# Reference :
# 1. MIMIC3 database
# 2. Rinaldo
# List of packages for session
.packages <- c("RPostgreSQL", "ggplot2", "data.table", "dplyr", "plyr",
"sqldf", "foreign", "e1071", "caTools", "ROCR", "arules", "arulesViz")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Load packages into session
lapply(.packages, library, character.only=TRUE)
# Set path
setwd("h:/GitHub/lcp_glucose/")
# db connection
con = dbConnect(dbDriver("PostgreSQL"), dbname = "mimic",
host = "127.0.0.1", port = 5432,
user = "postgres", password = "0367")
dbListTables(con)
dbExistsTable(con, c("mimiciii", "admissions"))
dbExistsTable(con, c("mimiciii", "diagnoses_icd"))
dbExistsTable(con, c("mimiciii", "prescriptions"))
###### processing ######
# get admission id (hadm_id), expire or not, length of stay (in hours) in table admissions
dbGetQuery(con, "select * from mimiciii.admissions limit 2")
admission = dbGetQuery(con, "SELECT hadm_id, hospital_expire_flag as expire,
DATE_PART('day', dischtime - admittime) * 24 + DATE_PART('hour', dischtime - admittime) as los
from mimiciii.admissions")
# get diagnosis with/without DM (ICD-9 = 250.xx -> mimic3: 250xx) - use admission
# admDM: all admissions with diagnosis of DM (ICD-9 250.*)
withDM = dbGetQuery(con, "SELECT hadm_id FROM mimiciii.diagnoses_icd WHERE icd9_code LIKE '250%' GROUP BY hadm_id")
# medication
meds = dbGetQuery(con, "SELECT prescriptions.hadm_id, string_agg(prescriptions.drug, ',')
FROM mimiciii.prescriptions
GROUP BY prescriptions.hadm_id")
# DM mortality pts meds
dmMeds = left_join(withDM, meds, by="hadm_id")
dmMedsMort = left_join(dmMeds, admission, by="hadm_id")
dmMedsMort = dmMedsMort[which(dmMedsMort$expire == 1), 2]
# input for apriori
bow = data.frame()
for (i in 1:length(dmMedsMort)) {
tmp = data.frame(as.list(strsplit(dmMedsMort, ",")[[i]]))
bow = rbind.fill(bow, tmp)
}
View(bow)
bow = data.frame()
i = 1
tmp = data.frame(as.list(strsplit(dmMedsMort, ",")[[i]]))
colnames(tmp)
colnames(tmp) = NA
colnames(tmp)
colnames(tmp) = ""
colnames(tmp)
colnames(tmp) = NA
colnames(tmp)
bow = data.frame()
tmp = data.frame(as.list(strsplit(dmMedsMort, ",")[[i]]))
colnames(tmp) = NA
bow = rbind.fill(bow, tmp)
tmp = data.frame(as.list(strsplit(dmMedsMort, ",")[[i]]))
colnames(tmp) = ""
bow = rbind.fill(bow, tmp)
View(tmp)
colnames(tmp) = X
tmp = data.frame(as.list(strsplit(dmMedsMort, ",")[[i]]))
colnames(tmp) = "x"
bow = rbind.fill(bow, tmp)
View(bow)
bow = data.frame()
tmp = data.frame(as.list(strsplit(dmMedsMort, ",")[[i]]))
View(tmp)
save.image("H:/GitHub/lcp_glucose/mimic3_apriori.RData")
tmp = data.frame(as.list(strsplit(dmMedsMort, ",")[[i]]))
length(dmMedsMort[i])
ncol(tmp)
for (i in ncol(tmp)) {
colnames(tmp)[i] = paste0("V", i)
}
View(tmp)
colnames(tmp)[i]
colnames
colnames(tmp)
for (i in 1:ncol(tmp)) {
colnames(tmp)[i] = paste0("V", i)
}
View(tmp)
bow = data.frame()
for (i in 1:length(dmMedsMort)) {
tmp = data.frame(as.list(strsplit(dmMedsMort, ",")[[i]]))
for (j in 1:ncol(tmp)) {
colnames(tmp)[j] = paste0("V", j)
}
bow = rbind.fill(bow, tmp)
}
View(bow)
bow = data.frame()
for (i in 1:length(dmMedsMort)) {
tmp = data.frame(as.list(strsplit(dmMedsMort, ",")[[i]]))
for (j in 1:ncol(tmp)) {
colnames(tmp)[j] = paste0("V", j)
}
bow = rbind.fill(bow, tmp)
}
write.csv(bow, "bow.csv", sep=";", eol="\n", row.names=F, col.names=F)
trans = read.transactions("bow.csv", format = "basket", sep = ",", rm.duplicates = T)
rules = apriori(trans, parameter = list(support = 0.01, confidence = 0.8, minlen = 3))
.packages <- c("ggplot2", "plyr", "arules", "arulesViz")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Load packages into session
invisible(lapply(.packages, library, character.only=TRUE))
# load the data
setwd("C:/Users/ww957/Downloads/note_ctakes_bow/")
trans = read.transactions("bow.csv", format = "basket", sep = ",", rm.duplicates = T)
# apriori algorithm
rules = apriori(trans, parameter = list(support = 0.001, confidence = 0.8, minlen = 2, maxlen = 5))
inspect(sort(rules, by = "lift")[1:50])
# add more features
quality(rules) = cbind(quality(rules), interestMeasure(rules, measure=c("chiSquare", "conviction", "cosine", "coverage", "doc", "gini", "hyperLift", "hyperConfidence", "fishersExactTest", "improvement", "leverage", "lift", "oddsRatio", "phi", "RLD"), rules))
# evaluation
summary(rules)
```
save.image("C:/Users/ww957/Downloads/arules.RData")
setwd("h:/GitHub/lcp_glucose/")
trans = read.transactions("bow.csv", format = "basket", sep = ",", rm.duplicates = T)
# apriori algorithm
rules = apriori(trans, parameter = list(support = 0.01, confidence = 0.9, minlen = 3, maxlen = 5))
rules = apriori(trans, parameter = list(support = 0.1, confidence = 0.9, minlen = 3, maxlen = 5))
rules = apriori(trans, parameter = list(support = 0.2, confidence = 0.9, minlen = 3, maxlen = 5))
summary(rules)
rules = apriori(trans, parameter = list(support = 0.3, confidence = 0.9, minlen = 3, maxlen = 5))
rules = apriori(trans, parameter = list(support = 0.3, confidence = 0.95, minlen = 3, maxlen = 5))
inspect(sort(rules, by = "lift")[1:10])
inspect(sort(rules, by = "lift")[1:50])
quality(rules) = cbind(quality(rules), interestMeasure(rules, measure=c("chiSquare", "conviction", "cosine", "coverage", "doc", "gini", "hyperLift", "hyperConfidence", "fishersExactTest", "improvement", "leverage", "lift", "oddsRatio", "phi", "RLD"), rules))
summary(rules)
plot(rules, method="grouped", control=list(k=10))
plot(subrules, method="graph", control=list(type="itemsets"))
subrules = head(sort(rules, by="lift"), 50)
plot(subrules, method="graph", control=list(type="itemsets"))
subrules = head(sort(rules, by="lift"), 30)
plot(subrules, method="graph", control=list(type="itemsets"))
save.image("H:/GitHub/lcp_glucose/mimic3_apriori.RData")
# load the data
trans = read.transactions("bagOfWords.csv", format = "basket", sep = ",", rm.duplicates = T)
# apriori algorithm
rules = apriori(trans, parameter = list(support = 0.3, confidence = 0.95, minlen = 3, maxlen = 5))
inspect(sort(rules, by = "lift")[1:50])
# add more features
quality(rules) = cbind(quality(rules), interestMeasure(rules, measure=c("chiSquare", "conviction", "cosine", "coverage", "doc", "gini", "hyperLift", "hyperConfidence", "fishersExactTest", "improvement", "leverage", "lift", "oddsRatio", "phi", "RLD"), rules))
# evaluation
summary(rules)
plot(rules, method="grouped", control=list(k=10))
subrules = head(sort(rules, by="lift"), 30)
plot(subrules, method="graph", control=list(type="itemsets"))
# List of packages for session
.packages <- c("RPostgreSQL", "ggplot2", "data.table", "dplyr", "plyr",
"sqldf", "foreign", "e1071", "caTools", "ROCR", "arules", "arulesViz")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Load packages into session
lapply(.packages, library, character.only=TRUE)
# Set path
setwd("h:/GitHub/lcp_glucose/")
# load the data
trans = read.transactions("bagOfWords.csv", format = "basket", sep = ",", rm.duplicates = T)
# apriori algorithm
rules = apriori(trans, parameter = list(support = 0.3, confidence = 0.95, minlen = 3, maxlen = 5))
inspect(sort(rules, by = "lift")[1:50])
# add more features
quality(rules) = cbind(quality(rules), interestMeasure(rules, measure=c("chiSquare", "conviction", "cosine", "coverage", "doc", "gini", "hyperLift", "hyperConfidence", "fishersExactTest", "improvement", "leverage", "lift", "oddsRatio", "phi", "RLD"), rules))
# evaluation
summary(rules)
plot(rules, method="grouped", control=list(k=10))
subrules = head(sort(rules, by="lift"), 30)
plot(subrules, method="graph", control=list(type="itemsets"))
save.image("H:/GitHub/lcp_glucose/mimic3_apriori.RData")
